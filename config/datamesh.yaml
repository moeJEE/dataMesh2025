# ==============================================================================
# DataMeesh - Production-Grade Data Mesh Architecture
# Cross-Platform Kubernetes Deployment
# ==============================================================================

---
# ==============================================================================
# NAMESPACES - Domain-Driven Organization
# ==============================================================================

apiVersion: v1
kind: Namespace
metadata:
  name: sales-domain
  labels:
    domain: sales
    mesh-component: domain
    tier: production

---
apiVersion: v1
kind: Namespace
metadata:
  name: marketing-domain
  labels:
    domain: marketing
    mesh-component: domain
    tier: production

---
apiVersion: v1
kind: Namespace
metadata:
  name: data-platform
  labels:
    mesh-component: platform
    tier: infrastructure

---
# ==============================================================================
# STORAGE CLASS - Persistent Data Management
# ==============================================================================

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: datamesh-storage
  labels:
    tier: storage
provisioner: docker.io/hostpath
reclaimPolicy: Retain  # Keep data after PVC deletion
volumeBindingMode: Immediate
allowVolumeExpansion: true

---
# ==============================================================================
# SECRETS - Secure Credentials Management
# ==============================================================================

apiVersion: v1
kind: Secret
metadata:
  name: sales-db-credentials
  namespace: sales-domain
  labels:
    app: sales
    tier: database
type: Opaque
data:
  username: c2FsZXNfdXNlcg==  # sales_user
  password: U3VwZXJTZWN1cmVQYXNzMTIzIQ==  # SuperSecurePass123!
  database: c2FsZXNfZGI=  # sales_db

---
apiVersion: v1
kind: Secret
metadata:
  name: marketing-db-credentials
  namespace: marketing-domain
  labels:
    app: marketing
    tier: database
type: Opaque
data:
  username: bWFya2V0aW5nX3VzZXI=  # marketing_user
  password: U3VwZXJTZWN1cmVQYXNzMTIzIQ==  # SuperSecurePass123!
  database: bWFya2V0aW5nX2Ri  # marketing_db

---
# ==============================================================================
# CONFIGMAPS - Externalized Configuration
# ==============================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: sales-domain-config
  namespace: sales-domain
  labels:
    domain: sales
    tier: configuration
data:
  DOMAIN_NAME: "sales"
  DOMAIN_OWNER: "sales-team@company.com"
  DATA_CLASSIFICATION: "confidential"
  QUALITY_THRESHOLD_COMPLETENESS: "0.95"
  QUALITY_THRESHOLD_VALIDITY: "0.98"
  API_VERSION: "v1"
  API_RATE_LIMIT: "1000"
  DATA_RETENTION_DAYS: "2555"  # 7 years
  METRICS_ENABLED: "true"
  LOG_LEVEL: "INFO"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: marketing-domain-config
  namespace: marketing-domain
  labels:
    domain: marketing
    tier: configuration
data:
  DOMAIN_NAME: "marketing"
  DOMAIN_OWNER: "marketing-team@company.com"
  DATA_CLASSIFICATION: "internal"
  QUALITY_THRESHOLD_COMPLETENESS: "0.90"
  API_VERSION: "v1"
  API_RATE_LIMIT: "500"
  DATA_RETENTION_DAYS: "730"  # 2 years
  METRICS_ENABLED: "true"
  LOG_LEVEL: "INFO"

---
# ==============================================================================
# SALES DOMAIN - Database with Persistent Storage
# ==============================================================================

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sales-postgres-pvc
  namespace: sales-domain
  labels:
    app: sales-postgres
    domain: sales
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: datamesh-storage
  resources:
    requests:
      storage: 5Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sales-postgres
  namespace: sales-domain
  labels:
    app: sales-postgres
    domain: sales
    tier: database
spec:
  serviceName: sales-postgres
  replicas: 1
  selector:
    matchLabels:
      app: sales-postgres
  template:
    metadata:
      labels:
        app: sales-postgres
        domain: sales
        tier: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      containers:
      - name: postgres
        image: postgres:14-alpine
        ports:
        - containerPort: 5432
          name: postgresql
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: sales-db-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sales-db-credentials
              key: password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: sales-db-credentials
              key: database
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - sales_user
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - sales_user
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: sales-postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: sales-postgres
  namespace: sales-domain
  labels:
    app: sales-postgres
    domain: sales
spec:
  type: ClusterIP
  selector:
    app: sales-postgres
  ports:
  - port: 5432
    targetPort: 5432
    name: postgresql

---
# ==============================================================================
# SALES DOMAIN - API Service
# ==============================================================================

apiVersion: v1
kind: ServiceAccount
metadata:
  name: sales-api-sa
  namespace: sales-domain
  labels:
    domain: sales

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sales-api
  namespace: sales-domain
  labels:
    app: sales-api
    domain: sales
    tier: application
    version: v1
spec:
  replicas: 2  # High availability
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: sales-api
  template:
    metadata:
      labels:
        app: sales-api
        domain: sales
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
    spec:
      serviceAccountName: sales-api-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: api
        image: python:3.11-slim
        command: ["python", "-m", "http.server", "8000"]
        ports:
        - containerPort: 8000
          name: http
        envFrom:
        - configMapRef:
            name: sales-domain-config
        env:
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@sales-postgres:5432/$(POSTGRES_DB)"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: sales-db-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sales-db-credentials
              key: password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: sales-db-credentials
              key: database
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - sales-api
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: sales-api
  namespace: sales-domain
  labels:
    app: sales-api
    domain: sales
spec:
  type: ClusterIP
  selector:
    app: sales-api
  ports:
  - port: 8000
    targetPort: 8000
    name: http
  sessionAffinity: ClientIP

---
# ==============================================================================
# MARKETING DOMAIN - Database with Persistent Storage
# ==============================================================================

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: marketing-postgres-pvc
  namespace: marketing-domain
  labels:
    app: marketing-postgres
    domain: marketing
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: datamesh-storage
  resources:
    requests:
      storage: 3Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: marketing-postgres
  namespace: marketing-domain
  labels:
    app: marketing-postgres
    domain: marketing
    tier: database
spec:
  serviceName: marketing-postgres
  replicas: 1
  selector:
    matchLabels:
      app: marketing-postgres
  template:
    metadata:
      labels:
        app: marketing-postgres
        domain: marketing
        tier: database
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsNonRoot: true
      containers:
      - name: postgres
        image: postgres:14-alpine
        ports:
        - containerPort: 5432
          name: postgresql
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: marketing-db-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: marketing-db-credentials
              key: password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: marketing-db-credentials
              key: database
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - marketing_user
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - marketing_user
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: marketing-postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: marketing-postgres
  namespace: marketing-domain
  labels:
    app: marketing-postgres
    domain: marketing
spec:
  type: ClusterIP
  selector:
    app: marketing-postgres
  ports:
  - port: 5432
    targetPort: 5432
    name: postgresql

---
# ==============================================================================
# MARKETING DOMAIN - API Service
# ==============================================================================

apiVersion: v1
kind: ServiceAccount
metadata:
  name: marketing-api-sa
  namespace: marketing-domain
  labels:
    domain: marketing

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: marketing-api
  namespace: marketing-domain
  labels:
    app: marketing-api
    domain: marketing
    tier: application
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: marketing-api
  template:
    metadata:
      labels:
        app: marketing-api
        domain: marketing
    spec:
      serviceAccountName: marketing-api-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      containers:
      - name: api
        image: python:3.11-slim
        command: ["python", "-m", "http.server", "8001"]
        ports:
        - containerPort: 8001
          name: http
        envFrom:
        - configMapRef:
            name: marketing-domain-config
        env:
        - name: DATABASE_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@marketing-postgres:5432/$(POSTGRES_DB)"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: marketing-db-credentials
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: marketing-db-credentials
              key: password
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: marketing-db-credentials
              key: database
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: marketing-api
  namespace: marketing-domain
  labels:
    app: marketing-api
    domain: marketing
spec:
  type: ClusterIP
  selector:
    app: marketing-api
  ports:
  - port: 8001
    targetPort: 8001
    name: http

---
# ==============================================================================
# HORIZONTAL POD AUTOSCALING - Sales API
# ==============================================================================

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sales-api-hpa
  namespace: sales-domain
  labels:
    domain: sales
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sales-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# ==============================================================================
# POD DISRUPTION BUDGET - High Availability
# ==============================================================================

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sales-api-pdb
  namespace: sales-domain
  labels:
    domain: sales
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: sales-api

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: marketing-api-pdb
  namespace: marketing-domain
  labels:
    domain: marketing
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: marketing-api

---
# ==============================================================================
# RESOURCE QUOTAS - Resource Management
# ==============================================================================

apiVersion: v1
kind: ResourceQuota
metadata:
  name: sales-domain-quota
  namespace: sales-domain
  labels:
    domain: sales
spec:
  hard:
    requests.cpu: "4"
    requests.memory: "8Gi"
    limits.cpu: "8"
    limits.memory: "16Gi"
    persistentvolumeclaims: "10"
    services: "10"
    pods: "20"

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: marketing-domain-quota
  namespace: marketing-domain
  labels:
    domain: marketing
spec:
  hard:
    requests.cpu: "2"
    requests.memory: "4Gi"
    limits.cpu: "4"
    limits.memory: "8Gi"
    persistentvolumeclaims: "5"
    services: "10"
    pods: "15"

---
# ==============================================================================
# NETWORK POLICIES - Security
# ==============================================================================

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: sales-domain-policy
  namespace: sales-domain
  labels:
    domain: sales
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow from data-platform
  - from:
    - namespaceSelector:
        matchLabels:
          mesh-component: platform
    ports:
    - protocol: TCP
      port: 8000
  # Allow internal communication
  - from:
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 8000
  egress:
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
  # Allow external APIs
  - ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: marketing-domain-policy
  namespace: marketing-domain
  labels:
    domain: marketing
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          mesh-component: platform
    ports:
    - protocol: TCP
      port: 8001
  - from:
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 8001
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
  - ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# ==============================================================================
# PRIORITY CLASSES - Workload Prioritization
# ==============================================================================

apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: datamesh-critical
value: 1000000
globalDefault: false
description: "Critical data mesh services (databases, core APIs)"

---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: datamesh-high
value: 100000
globalDefault: false
description: "High priority data mesh services (APIs, processors)"

---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: datamesh-medium
value: 10000
globalDefault: true
description: "Medium priority data mesh services (batch jobs)"

